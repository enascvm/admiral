/*
 * Copyright (c) 2017-2018 VMware, Inc. All Rights Reserved.
 *
 * This product is licensed to you under the Apache License, Version 2.0 (the "License").
 * You may not use this product except in compliance with the License.
 *
 * This product may include a number of subcomponents with separate copyright notices
 * and license terms. Your use of these subcomponents is subject to the terms and
 * conditions of the subcomponent's license, as noted in the LICENSE file.
 */

import { ReplaySubject } from 'rxjs';

/**
 * Abstract base class for any subjects to be used in the application.
 * Subjects are entities similar to Stores in Reflux using ReplaySubject(1) from RxJS.
 *
 * @abstract
 * @class Subject
 * @template T the type of the model stored in this Subject
 */
export abstract class Subject<T> {
    private subject = new ReplaySubject<T>(1);

    /**
     * Method to be implemented in subclasses. Puts together the payload
     * of the subject to be send to the subscribers, on the next cycle of notifications.
     *
     * @protected
     * @abstract
     * @returns {T} the model stored
     *
     * @memberOf Subject
     */
    protected abstract getModel(): T;

    /**
     * Notifies the subscribers with the payload, generated by getModel()
     *
     * @protected
     *
     * @memberOf Subject
     */
    protected emit() {
        this.subject.next(this.getModel());
    }

    /**
     * Register the subscribers and return a Subscription.
     *
     * @param {any} callback The subscriber's method to be called at every data update
     * @returns {Subscription} the subscription
     *
     * @memberOf Subject
     * @see Observable
     * @see Subscription
     */
    public subscribe(callback) {
        return this.subject.subscribe(callback);
    }
}
