<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2016 VMware, Inc. All Rights Reserved.
  ~
  ~ This product is licensed to you under the Apache License, Version 2.0 (the "License").
  ~ You may not use this product except in compliance with the License.
  ~
  ~ This product may include a number of subcomponents with separate copyright notices
  ~ and license terms. Your use of these subcomponents is subject to the terms and
  ~ conditions of the subcomponent's license, as noted in the LICENSE file.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.vmware.admiral</groupId>
        <artifactId>admiral</artifactId>
        <version>1.4.1-SNAPSHOT</version>
    </parent>

    <artifactId>admiral-common</artifactId>
    <packaging>jar</packaging>

    <build>
        <plugins>
            <!--
                Re-encodes the i18n properties files to ISO-8859-1 compliant
                format so they can be loaded by the java ResourceBundle API normally.
                Refer to https://stackoverflow.com/a/7105774 and also note the comments
                about src/dest/workDir. Also, there is a working example (that does not
                follow the code in the same github repo):
                https://github.com/khajavi/native2ascii-maven-plugin/blob/b741d254921ac3d26c785603aa22f5201ca10276/example/pom.xml
             -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>native2ascii-maven-plugin</artifactId>
                <version>1.0-beta-1</version>
                <executions>
                    <execution>
                        <id>native2ascii-utf8-i18n-resources</id>
                        <!--
                            process-classes will happen after proccess-resources,
                            so the resource bundles will already be available
                        -->
                        <phase>process-classes</phase>
                        <goals>
                            <goal>native2ascii</goal>
                        </goals>
                        <configuration>
                            <workDir>target/classes/i18n</workDir>
                            <encoding>UTF-8</encoding>
                            <includes>
                                <include>messages*.properties</include>
                            </includes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>native2ascii-utf8-i18n-test-resources</id>
                        <!--
                            process-test-classes will happen after proccess-test-resources,
                            so the resource bundles will already be available
                        -->
                        <phase>process-test-classes</phase>
                        <goals>
                            <goal>native2ascii</goal>
                        </goals>
                        <configuration>
                            <workDir>target/test-classes/i18n</workDir>
                            <encoding>UTF-8</encoding>
                            <includes>
                                <include>messages*.properties</include>
                            </includes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>

    <dependencies>
        <dependency>
            <groupId>${xenon.group}</groupId>
            <artifactId>xenon-common</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmware.photon.controller</groupId>
            <artifactId>photon-model</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmware.photon.controller</groupId>
            <artifactId>photon-model-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcprov-jdk15on</artifactId>
            <version>${bouncycastle.version}</version>
        </dependency>
        <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcpkix-jdk15on</artifactId>
            <version>${bouncycastle.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-yaml</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>

        <!-- TEST -->
        <dependency>
            <groupId>${xenon.group}</groupId>
            <artifactId>xenon-common</artifactId>
            <version>${xenon.version}</version>
            <classifier>tests</classifier>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
